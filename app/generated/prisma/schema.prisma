// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  trips       Trip[]       @relation("OwnerTrips")
  sharedTrips SharedTrip[] @relation("SharedWithUser")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Trip {
  id          String       @id @default(cuid())
  destination String
  visibility  Visibility   @default(PRIVATE)
  ownerId     String
  owner       User         @relation("OwnerTrips", fields: [ownerId], references: [id], onDelete: Cascade)
  sharedWith  SharedTrip[]

  metadata     Json
  tripPlan     Json
  costObj      Json
  currencyCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model SharedTrip {
  id     String @id @default(uuid())
  tripId String
  userId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user   User   @relation("SharedWithUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
}

enum Visibility {
  PRIVATE
  PUBLIC
  SHARED
}
